<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <base target="_top">
  <title>Flow TL Console</title>
  <style>
    :root{
      --bg:#ffffff; --fg:#0b0f1a; --muted:#6b7280; --line:#e5e7eb;
      --brand:#6c2bd9; --accent:#00c2a8;
      --ok:#16a34a; --warn:#f59e0b; --danger:#e11d48; --idle:#9aa3af;
      --chip:#f6f7fb; --chip2:#f9fafb;
    }
    *{box-sizing:border-box}
    body{margin:0;background:var(--bg);color:var(--fg);font:14px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}
    header{position:sticky;top:0;z-index:10;background:linear-gradient(180deg,#f7f7fb 0%, #ffffff 100%);border-bottom:1px solid var(--line);
      padding:10px 12px; display:flex; align-items:center; justify-content:space-between}
    .title{display:flex;align-items:center;gap:8px;font-weight:800}
    .brandDot{width:10px;height:10px;border-radius:999px;background:linear-gradient(135deg,var(--brand),var(--accent))}
    .wrap{padding:12px;display:grid;gap:12px}
    .row{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
    .card{border:1px solid var(--line);border-radius:14px;padding:12px;background:#fff;box-shadow:0 1px 0 rgba(17,24,39,.02)}
    input,select,button{font:inherit;border:1px solid var(--line);border-radius:10px;padding:8px 10px;background:#fff}
    button.primary{background:var(--brand);color:#fff;border-color:var(--brand)}
    button.primary:disabled{opacity:.6}
    .small{font-size:12px;color:var(--muted)}
    .kpis{display:flex;gap:12px;flex-wrap:wrap}
    .kpi{padding:10px 12px;border:1px solid var(--line);border-radius:10px;background:var(--chip)}
    table{width:100%;border-collapse:collapse}
    th,td{padding:8px 10px;border-bottom:1px solid var(--line);text-align:left}
    th{background:#fafafa;position:sticky;top:56px;z-index:5}
    .pill{padding:2px 8px;border-radius:999px;background:#eef2ff;cursor:pointer}
    .badge{display:inline-flex;align-items:center;gap:6px;padding:3px 8px;border-radius:999px;background:#fff;border:1px solid var(--line);font-weight:600}
    .dot{width:8px;height:8px;border-radius:999px;background:var(--idle)}
    .dot.ok{background:var(--ok)} .dot.warn{background:var(--warn)} .dot.danger{background:var(--danger)}
    .error{color:var(--danger);font-weight:600}
    .loading{opacity:.7;pointer-events:none}

    /* Inline editor */
    .state-cell{cursor:pointer}
    .inline-select{position:absolute;background:#fff;border:1px solid var(--line);border-radius:8px;padding:6px;box-shadow:0 8px 24px rgba(0,0,0,.08);z-index:99999}

    /* Drawer */
    .drawer{
      position:fixed; top:0; right:0; height:100vh; width:560px; max-width:94vw;
      background:#fff; border-left:1px solid var(--line); box-shadow:-16px 0 40px rgba(0,0,0,.08);
      transform:translateX(100%); transition:transform .25s ease; z-index:9998; display:flex; flex-direction:column;
    }
    .drawer.open{ transform:translateX(0); }
    .drawer header{ position:relative; top:auto; background:#fff; border-bottom:1px solid var(--line); }
    .drawer .body{ padding:12px; overflow:auto; display:grid; gap:10px; }
    .xbtn{border:1px solid var(--line);border-radius:10px;padding:6px 10px;background:#fff;cursor:pointer}
    .seg{display:flex;gap:4px;flex-wrap:wrap}
    .seg button{border:1px solid var(--line);background:var(--chip2)}
    .seg button.active{background:var(--brand);border-color:var(--brand);color:#fff}
    .tabs{display:flex;gap:6px;border-bottom:1px solid var(--line)}
    .tabs button{border:0;background:transparent;padding:8px 10px;border-bottom:2px solid transparent;cursor:pointer}
    .tabs button.active{border-color:var(--brand);color:var(--brand);font-weight:700}

    /* Calendar visuals */
    .cal-day{border:1px solid var(--line);border-radius:12px;padding:10px;margin-bottom:10px;background:#fff}
    .twoCols{display:grid;grid-template-columns:1fr 1fr;gap:12px}
    .colHead{font-weight:700;margin-bottom:6px}
    .cal-grid{position:relative;border-left:2px solid #e2e8f0;padding-left:8px;margin-top:8px}
    .hour{position:relative;border-top:1px dashed #e5e7eb}
    .hour .mark{position:absolute;left:-8px;top:-7px;font-size:10px;color:#94a3b8;background:#fff;padding:0 4px}
    .slot{position:absolute;left:16px;right:8px;border-radius:8px;padding:6px 8px;background:var(--chip);border:1px solid var(--line);overflow:hidden}
    .slot.working{background:#ecfdf5;border-color:#bbf7d0}
    .slot.meeting,.slot.admin,.slot.training,.slot.coaching{background:#fff7ed;border-color:#fed7aa}
    .slot.idle,.slot.break,.slot.lunch{background:#f3f4f6;border-color:#e5e7eb}
    .slot.loggedout,.slot.ooo{background:#fff1f2;border-color:#fecdd3}
    .slot .title{font-weight:700;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
    .slot .checks{font-size:12px;color:#374151;margin-top:2px}
    .slot .sub{font-size:12px;color:#374151;margin-top:2px}
    .slot.compact .title{font-size:12px;font-weight:700}
    .slot.compact .sub,.slot.compact .checks{display:none}

    /* Hover card for blocks (states/calendar) */
    .hovercard{
      position:fixed; z-index:99999; max-width:320px;
      background:#111827; color:#f9fafb; border:1px solid rgba(255,255,255,.08);
      border-radius:10px; padding:8px 10px; box-shadow:0 12px 24px rgba(0,0,0,.2);
      font-size:12px; line-height:1.35; pointer-events:none; display:none;
    }
    .hovercard b{color:#fff}
  </style>
</head>
<body>
  <header>
    <div class="title"><span class="brandDot"></span> Flow TL Console</div>
    <div class="row">
      <input id="dateInput" type="date" />
      <button id="btnRefresh" class="primary">Refresh</button>
      <span id="statusMsg" class="small"></span>
    </div>
  </header>

  <div class="wrap">
    <div id="alert" class="small"></div>

    <div class="card">
      <div class="kpis" id="kpis"></div>
    </div>

    <div class="card">
      <div class="row small" style="margin-bottom:8px;">Click a <b>State</b> to change it. Click an <b>Analyst</b> to open their calendar & stats.</div>
      <div id="tableMount">Loading…</div>
    </div>
  </div>

  <!-- Drawer -->
  <div id="drawer" class="drawer" aria-hidden="true">
    <header class="row" style="justify-content:space-between;">
      <div class="row">
        <div id="drawerTitle" style="font-weight:800">—</div>
        <div id="drawerSub" class="small muted">—</div>
      </div>
      <button id="btnCloseDrawer" class="xbtn">Close</button>
    </header>
    <div class="body">
      <div class="row" style="justify-content:space-between">
        <div class="seg" id="rangeSeg">
          <button data-range="day" class="active">Day</button>
          <button data-range="week">Week</button>
          <button data-range="month">Month</button>
          <button data-range="custom">Custom</button>
        </div>
        <div class="row">
          <input id="rangeStart" type="date">
          <span>→</span>
          <input id="rangeEnd" type="date">
          <button id="btnRangeGo" class="primary">Go</button>
        </div>
      </div>

      <div class="tabs">
        <button id="tabCal" class="active">Calendar</button>
        <button id="tabStats">Stats</button>
      </div>

      <div id="panelCal">
        <div id="calMount" class="small muted">Loading…</div>
      </div>
      <div id="panelStats" class="hidden">
        <div id="statsMount" class="small muted">Loading…</div>
      </div>
    </div>
  </div>

  <!-- Hover card -->
  <div id="hoverCard" class="hovercard"></div>

  <script>
    // ---------- Helpers ----------
    const $ = s => document.querySelector(s);
    const $$ = s => Array.from(document.querySelectorAll(s));
    const setAlert = (html, err=false)=>{ const el=$('#alert'); el.innerHTML=html||''; el.className=err?'small error':'small'; };
    const isoToday = ()=> new Date(Date.now()-new Date().getTimezoneOffset()*60000).toISOString().slice(0,10);
    const clamp = (n,min,max)=> Math.max(min, Math.min(max,n));
    const pad2 = n => String(n).padStart(2,'0');
    const stateClass = s => {
      const x = String(s||'').toLowerCase();
      if (x==='working' || x==='admin') return 'ok';
      if (['meeting','training','coaching','break','lunch'].includes(x)) return 'warn';
      if (x==='loggedout' || x==='ooo') return 'danger';
      return 'idle';
    };
    const slotClass = s => {
      const x = String(s||'').toLowerCase();
      if (x==='working') return 'working';
      if (['meeting','admin','training','coaching'].includes(x)) return 'meeting';
      if (['idle','break','lunch'].includes(x)) return 'idle';
      if (['loggedout','ooo'].includes(x)) return 'loggedout';
      return 'idle';
    };

    // ---- Zoom for calendar (persists per-user) ----
    const ZOOM_STORE_KEY = 'tl_cal_zoom_v1'; // pixels-per-hour = 40 * zoom
    function getCalZoom(){ 
      const z = Number(localStorage.getItem(ZOOM_STORE_KEY));
      return (z && z>=0.75 && z<=3) ? z : 1;
    }
    function setCalZoom(z){
      const clampZ = Math.min(3, Math.max(0.75, Number(z)||1));
      localStorage.setItem(ZOOM_STORE_KEY, String(clampZ));
      return clampZ;
    }

    // ---------- Page: KPIs & table ----------
    let ALLOWED_STATES = ['Working','Meeting','Lunch','Break','LoggedOut'];
    let LAST_SNAPSHOT = { rows:[], kpis:{} };

    function renderKPIs(k){
      // Recompute averages using only analysts who have logged_in_mins > 0 for the day displayed
      const rows = LAST_SNAPSHOT?.rows || [];
      const eligible = rows.filter(r => Number(r.logged_in_mins||0) > 0);
      const avg = (arr, key) => {
        if (!arr.length) return 0;
        const nums = arr.map(x => Number(x[key] || 0)).filter(n => !isNaN(n));
        if (!nums.length) return 0;
        return Math.round(nums.reduce((a,b)=>a+b,0) / nums.length);
      };
      const k2 = {
        total_checks: rows.reduce((a,r)=> a + (Number(r.today_checks||0)||0), 0),
        avg_efficiency: avg(eligible,'efficiency_pct'),
        avg_utilisation: avg(eligible,'utilisation_pct'),
        working: rows.filter(r => String(r.state||'').toLowerCase()==='working' || String(r.state||'').toLowerCase()==='admin').length,
        meeting: rows.filter(r => String(r.state||'').toLowerCase()==='meeting').length,
        other: rows.filter(r => !['working','admin','meeting','loggedout'].includes(String(r.state||'').toLowerCase())).length,
        loggedout: rows.filter(r => String(r.state||'').toLowerCase()==='loggedout').length
      };

      const host = $('#kpis');
      host.innerHTML='';
      const chips = [
        ['Total checks', k2.total_checks||0],
        ['Avg efficiency', (k2.avg_efficiency||0) + '%'],
        ['Avg utilisation', (k2.avg_utilisation||0) + '%'],
        ['Working', k2.working||0],
        ['Meeting', k2.meeting||0],
        ['Other', k2.other||0],
        ['Logged out', k2.loggedout||0],
      ];
      chips.forEach(([label,val])=>{
        const div=document.createElement('div'); div.className='kpi';
        div.innerHTML=`<div class="small">${label}</div><div style="font-size:18px;font-weight:800">${val}</div>`;
        host.appendChild(div);
      });
    }

    function renderTable(rows){
      const host = $('#tableMount');
      if (!rows || !rows.length){ host.innerHTML='<div class="small">No data for this date.</div>'; return; }

      const th = `
      <thead><tr>
        <th>Analyst</th><th>Team</th><th>State</th><th>Online</th>
        <th>Checks</th><th>Eff%</th><th>Util%</th><th>TPH</th><th>Logged-in mins</th><th>Location</th>
      </tr></thead>`;

      const tr = rows.map(r=>{
        const cls = stateClass(r.state);
        return `<tr data-analyst="${r.analyst_id}" data-name="${r.name||''}">
          <td><span class="pill analyst-link">${r.name||r.analyst_id}</span></td>
          <td>${r.team||''}</td>
          <td class="state-cell"><span class="badge"><span class="dot ${cls}"></span>${r.state||'Idle'}</span></td>
          <td>${r.online?'Yes':'No'}</td>
          <td>${r.today_checks||0}</td>
          <td>${r.efficiency_pct ?? 0}</td>
          <td>${r.utilisation_pct ?? 0}</td>
          <td>${r.throughput_per_hr ?? 0}</td>
          <td>${r.logged_in_mins ?? 0}</td>
          <td>${r.location||''}</td>
        </tr>`;
      }).join('');

      host.innerHTML = `<table>${th}<tbody>${tr}</tbody></table>`;
      bindStateEditors();
      bindAnalystLinks();
    }

    function bindStateEditors(){
      $$('#tableMount td.state-cell').forEach(td=>{
        td.addEventListener('click', ()=>{
          const tr = td.closest('tr'); const analystId = tr?.dataset?.analyst;
          if (!analystId) return;
          document.querySelectorAll('.inline-select').forEach(x=>x.remove());

          const pop = document.createElement('div');
          pop.className='inline-select';
          pop.innerHTML = `
            <select id="stateSelTemp">${ALLOWED_STATES.map(s=>`<option value="${s}">${s}</option>`).join('')}</select>
            <button id="btnApply" class="primary" style="margin-left:6px">Apply</button>
            <button id="btnCancel" style="margin-left:4px">Cancel</button>`;
          document.body.appendChild(pop);
          const rect = td.getBoundingClientRect();
          pop.style.left=(rect.left+window.scrollX)+'px'; pop.style.top=(rect.bottom+window.scrollY+4)+'px';

          const remove=()=>pop.remove();
          pop.querySelector('#btnCancel').addEventListener('click', remove);
          pop.querySelector('#btnApply').addEventListener('click', ()=>{
            const newState = pop.querySelector('#stateSelTemp').value;
            $('#statusMsg').textContent='Applying state…';
            google.script.run.withSuccessHandler(()=>{
              remove(); $('#statusMsg').textContent='State updated. Refreshing…'; fetchSnapshot();
            }).withFailureHandler(e=>{
              remove(); setAlert('Set state error: '+(e?.message||e), true);
            }).tlSetStateProxy(analystId, newState, 'TL Console change');
          });
        });
      });

      document.addEventListener('click', (e)=>{
        if (!e.target.closest('.inline-select') && !e.target.closest('.state-cell')) {
          document.querySelectorAll('.inline-select').forEach(x=>x.remove());
        }
      }, {capture:true});
    }

    function bindAnalystLinks(){
      $$('#tableMount .analyst-link').forEach(el=>{
        el.addEventListener('click', ()=>{
          const tr = el.closest('tr');
          const analystId = tr?.dataset?.analyst; const name = tr?.dataset?.name || analystId;
          openDrawer(analystId, name);
        });
      });
    }

    // ---------- Drawer: calendar & stats ----------
    let AUTO_REFRESH = true;
    let DRAWER_OPEN=false, DR_CURRENT={ analystId:null, name:'', range:'day', start:isoToday(), end:isoToday() };

    function openDrawer(analystId, name){
      DR_CURRENT.analystId = analystId; DR_CURRENT.name = name || analystId;
      $('#drawerTitle').textContent = name || analystId;
      $('#drawerSub').textContent = DR_CURRENT.analystId;
      // default range = Day at the table's date
      DR_CURRENT.range='day';
      const d = $('#dateInput').value || isoToday();
      DR_CURRENT.start = d; DR_CURRENT.end = d;
      $('#rangeStart').value = d; $('#rangeEnd').value = d;
      $('#panelCal').style.display='block'; $('#panelStats').style.display='none';
      $('#tabCal').classList.add('active'); $('#tabStats').classList.remove('active');
      $$('#rangeSeg button').forEach(b=> b.classList.toggle('active', b.dataset.range==='day'));
      $('#calMount').textContent='Loading…';
      $('#statsMount').textContent='Loading…';
      $('#drawer').classList.add('open'); DRAWER_OPEN=true; AUTO_REFRESH=false;
      fetchCalendarRange();
    }
    $('#btnCloseDrawer').addEventListener('click', ()=>{ $('#drawer').classList.remove('open'); DRAWER_OPEN=false; AUTO_REFRESH=true; });

    // Tabs
    $('#tabCal').addEventListener('click', ()=>{
      $('#tabCal').classList.add('active'); $('#tabStats').classList.remove('active');
      $('#panelCal').style.display='block'; $('#panelStats').style.display='none';
    });
    $('#tabStats').addEventListener('click', ()=>{
      $('#tabStats').classList.add('active'); $('#tabCal').classList.remove('active');
      $('#panelStats').style.display='block'; $('#panelCal').style.display='none';
      buildStatsFromCache();
    });

    // Range buttons
    $$('#rangeSeg button').forEach(b=>{
      b.addEventListener('click', ()=>{
        $$('#rangeSeg button').forEach(x=>x.classList.remove('active'));
        b.classList.add('active');
        DR_CURRENT.range = b.dataset.range;
        const base = $('#dateInput').value || isoToday();
        if (DR_CURRENT.range==='day'){ DR_CURRENT.start=base; DR_CURRENT.end=base; }
        if (DR_CURRENT.range==='week'){
          const d=new Date(base); const day = d.getDay(); // 0 Sun..6 Sat
          const monday = new Date(d); monday.setDate(d.getDate() - ((day+6)%7));
          const sunday = new Date(monday); sunday.setDate(monday.getDate()+6);
          DR_CURRENT.start = monday.toISOString().slice(0,10);
          DR_CURRENT.end = sunday.toISOString().slice(0,10);
        }
        if (DR_CURRENT.range==='month'){
          const d=new Date(base); const mStart = new Date(d.getFullYear(), d.getMonth(), 1);
          const mEnd = new Date(d.getFullYear(), d.getMonth()+1, 0);
          DR_CURRENT.start = mStart.toISOString().slice(0,10);
          DR_CURRENT.end = mEnd.toISOString().slice(0,10);
        }
        if (DR_CURRENT.range!=='custom'){
          $('#rangeStart').value=DR_CURRENT.start; $('#rangeEnd').value=DR_CURRENT.end;
          fetchCalendarRange();
        }
      });
    });
    $('#btnRangeGo').addEventListener('click', ()=>{
      const s=$('#rangeStart').value, e=$('#rangeEnd').value;
      if (!s || !e) return;
      DR_CURRENT.range='custom';
      fetchCalendarRange();
    });

    // Cache of per-day timelines during current drawer session
    let RANGE_CACHE = {}; // key: dateISO -> {stints:[...], checks:[...], calendar:[...]}

    async function fetchCalendarRange(){
      if (!DR_CURRENT.analystId) return;
      $('#calMount').textContent='Loading…';
      RANGE_CACHE = {};
      const dates = enumerateDates(DR_CURRENT.start, DR_CURRENT.end);
      try{
        for (const d of dates){
          await new Promise((resolve)=>{
            google.script.run.withSuccessHandler(res=>{
              RANGE_CACHE[d] = res || {stints:[],checks:[],calendar:[]};
              resolve();
            }).withFailureHandler(err=>{
              RANGE_CACHE[d] = {stints:[],checks:[],calendar:[], error:String(err?.message||err)};
              resolve();
            }).getAnalystDayTimelineProxy(DR_CURRENT.analystId, d);
          });
        }
        renderCalendarRange(dates);
        if ($('#tabStats').classList.contains('active')) buildStatsFromCache();
      }catch(e){
        $('#calMount').innerHTML = `<div class="error">Range error: ${e?.message||e}</div>`;
      }
    }

    function enumerateDates(startISO, endISO){
      const out=[]; const s=new Date(startISO+'T00:00:00'); const e=new Date(endISO+'T00:00:00');
      for (let d=new Date(s); d<=e; d.setDate(d.getDate()+1)){
        out.push(new Date(d.getTime()-d.getTimezoneOffset()*60000).toISOString().slice(0,10));
      }
      return out;
    }

    function renderCalendarRange(dates){
      const host = $('#calMount');
      if (!dates.length){ host.innerHTML='<div class="small">No dates in range.</div>'; return; }
      const todayISO = isoToday();
      const now = new Date();

      // Common hour grid params (zoom-aware)
      const zoom = getCalZoom();
      const PX_PER_HOUR = Math.round(40 * zoom);
      const pxPerMin = PX_PER_HOUR / 60;
      const startH=7, endH=20;

      const hoursHTML = Array.from({length:(endH-startH)+1},(_,i)=> {
        const h = startH+i;
        return `<div class="hour" style="height:${PX_PER_HOUR}px"><div class="mark">${pad2(h)}:00</div></div>`;
      }).join('');

      // DAY VIEW → side-by-side columns (States | Calendar)
      if (DR_CURRENT.range==='day' && dates.length===1){
        const dateISO = dates[0];
        const day = RANGE_CACHE[dateISO] || {stints:[],checks:[],calendar:[]};
        const label = new Date(dateISO+'T12:00:00');
        const labelStr = label.toLocaleDateString(undefined,{weekday:'short', year:'numeric', month:'short', day:'numeric'});

        const MIN_BLOCK = Math.round(24 * zoom);

        // Build state slots
        const stateSlots = (day.stints||[]).map(s=>{
          const sT = new Date(s.start_iso);
          const rawEnd = new Date(s.end_iso);
          const endTime = (dateISO===todayISO && rawEnd>now) ? now : rawEnd;
          const dayStart = new Date(dateISO+'T00:00:00');
          const yStart = ((sT - dayStart)/60000 - startH*60) * pxPerMin;
          const yEnd = ((endTime - dayStart)/60000 - startH*60) * pxPerMin;
          const top = clamp(yStart, 0, (endH-startH)*PX_PER_HOUR);
          let height = Math.min((endH-startH)*PX_PER_HOUR - top, yEnd - top);
          const compact = height < MIN_BLOCK;
          height = Math.max(MIN_BLOCK, height);
          const cls = slotClass(s.state);
          const period = `${sT.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}–${endTime.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}`;
          const checks = (day.checks||[]).filter(c=>{
            const t = new Date(c.ts_iso);
            return t >= sT && t <= endTime;
          }).map(c=> `${c.check_type} (${c.duration_mins||0}m) — ${c.case_id}`).join('<br>');
          const full = `<b>${s.state}</b><br>${period}${checks?'<br>'+checks:''}`;
          return `<div class="slot ${cls}${compact?' compact':''}" style="top:${top}px;height:${height}px"
                    data-full="${full.replace(/"/g,'&quot;')}">
                    <div class="title">${s.state}</div>
                    ${checks ? `<div class="checks">${checks}</div>`:''}
                  </div>`;
        }).join('');

        // Build calendar event slots (accepted)
        const calSlots = (day.calendar||[]).map(ev=>{
          const sT = new Date(ev.start_iso);
          const rawEnd = new Date(ev.end_iso);
          const endTime = (dateISO===todayISO && rawEnd>now) ? now : rawEnd;
          const dayStart = new Date(dateISO+'T00:00:00');
          const yStart = ((sT - dayStart)/60000 - startH*60) * pxPerMin;
          const yEnd = ((endTime - dayStart)/60000 - startH*60) * pxPerMin;
          const top = clamp(yStart, 0, (endH-startH)*PX_PER_HOUR);
          let height = Math.min((endH-startH)*PX_PER_HOUR - top, yEnd - top);
          const compact = height < MIN_BLOCK;
          height = Math.max(MIN_BLOCK, height);
          const timeLbl = `${sT.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}–${endTime.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}`;
          const cls = slotClass(ev.category || 'Meeting');
          const title = ev.title || ev.category || 'Meeting';
          const full = `<b>${title}</b><br>${ev.category||'Meeting'} · ${timeLbl}`;
          return `<div class="slot ${cls}${compact?' compact':''}" style="top:${top}px;height:${height}px"
                    data-full="${full.replace(/"/g,'&quot;')}">
                    <div class="title">${title}</div>
                    <div class="sub">${ev.category || ''}${ev.category ? ' · ' : ''}${timeLbl}</div>
                  </div>`;
        }).join('');

        const zoomCtl = `
          <div class="row small" style="gap:6px;align-items:center;margin-top:6px;">
            <span class="muted">Zoom</span>
            <button id="zOut" class="xbtn" style="padding:2px 8px">–</button>
            <span class="muted">${(zoom*100)|0}%</span>
            <button id="zIn" class="xbtn" style="padding:2px 8px">+</button>
          </div>`;

        host.innerHTML = `
          <div class="cal-day">
            <div><b>${labelStr}</b> <span class="grid-note">(${startH}:00–${endH}:00)</span></div>
            ${zoomCtl}
            <div class="twoCols" style="margin-top:6px;">
              <div>
                <div class="colHead">States</div>
                <div class="cal-grid" style="height:${(endH-startH)*PX_PER_HOUR}px">
                  ${hoursHTML}
                  ${stateSlots || `<div class="small muted" style="padding:8px">No states logged.</div>`}
                </div>
              </div>
              <div>
                <div class="colHead">Calendar</div>
                <div class="cal-grid" style="height:${(endH-startH)*PX_PER_HOUR}px">
                  ${hoursHTML}
                  ${calSlots || `<div class="small muted" style="padding:8px">No accepted events.</div>`}
                </div>
              </div>
            </div>
          </div>`;

        // Wire zoom buttons
        const zIn = document.getElementById('zIn'), zOut = document.getElementById('zOut');
        if (zIn && zOut){
          zIn.onclick = ()=>{ setCalZoom(getCalZoom()+0.15); renderCalendarRange(dates); };
          zOut.onclick = ()=>{ setCalZoom(getCalZoom()-0.15); renderCalendarRange(dates); };
        }

        // Bind hover cards for this day view
        bindHoverCards();
        return;
      }

      // OTHER RANGES → original single-column stacked day timelines (states)
      const blocks = dates.map(dateISO=>{
        const day = RANGE_CACHE[dateISO] || {stints:[], checks:[], calendar:[]};
        const label = new Date(dateISO+'T12:00:00'); // mid-day to avoid TZ quirks
        const labelStr = label.toLocaleDateString(undefined,{weekday:'short', year:'numeric', month:'short', day:'numeric'});
        const MIN_BLOCK = Math.round(24 * zoom);

        const stateSlots = (day.stints||[]).map(s=>{
          const sT = new Date(s.start_iso); const eT = new Date(s.end_iso);
          const endTime = (dateISO===todayISO && eT>now) ? now : eT;
          const dayStart = new Date(dateISO+'T00:00:00');
          const yStart = ((sT - dayStart)/60000 - startH*60) * pxPerMin;
          const yEnd = ((endTime - dayStart)/60000 - startH*60) * pxPerMin;
          const top = clamp(yStart, 0, (endH-startH)*PX_PER_HOUR);
          let height = Math.min((endH-startH)*PX_PER_HOUR - top, yEnd - top);
          const compact = height < MIN_BLOCK;
          height = Math.max(MIN_BLOCK, height);
          const cls = slotClass(s.state);
          const checks = (day.checks||[]).filter(c=>{
            const t = new Date(c.ts_iso);
            return t >= sT && t <= endTime;
          }).map(c=> `${c.check_type} (${c.duration_mins||0}m) — ${c.case_id}`).join('<br>');
          const period = `${sT.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}–${endTime.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}`;
          const full = `<b>${s.state}</b><br>${period}${checks?'<br>'+checks:''}`;
          return `<div class="slot ${cls}${compact?' compact':''}" style="top:${top}px;height:${height}px" data-full="${full.replace(/"/g,'&quot;')}">
                  <div class="title">${s.state}</div>
                  ${checks ? `<div class="checks">${checks}</div>`:''}
                </div>`;
        }).join('');

        return `
          <div class="cal-day">
            <div><b>${labelStr}</b> <span class="grid-note">(${startH}:00–${endH}:00)</span></div>
            <div class="cal-grid" style="height:${(endH-startH)*PX_PER_HOUR}px; position:relative;">
              ${hoursHTML}
              ${stateSlots}
            </div>
          </div>`;
      }).join('');

      host.innerHTML = blocks;
      bindHoverCards();
    }

    function bindHoverCards(){
      const card = $('#hoverCard');
      const show = (html, x, y) => {
        card.innerHTML = html;
        card.style.display = 'block';
        const pad = 10;
        const maxX = window.innerWidth - card.offsetWidth - pad;
        const maxY = window.innerHeight - card.offsetHeight - pad;
        card.style.left = Math.min(x+12, maxX) + 'px';
        card.style.top = Math.min(y+12, maxY) + 'px';
      };
      const hide = () => { card.style.display='none'; };

      // Delegate on calMount
      const mount = $('#calMount');
      if (!mount) return;

      mount.addEventListener('mousemove', (e)=>{
        const slot = e.target.closest('.slot');
        if (slot && slot.dataset.full){
          show(slot.dataset.full, e.clientX, e.clientY);
        } else {
          hide();
        }
      });
      mount.addEventListener('mouseleave', hide);
      // Also hide on scroll to avoid stale placement
      mount.addEventListener('scroll', hide, true);
    }

    function buildStatsFromCache(){
      const host = $('#statsMount');
      const dates = enumerateDates(DR_CURRENT.start, DR_CURRENT.end);
      let totalChecks=0, byType={};

      dates.forEach(d=>{
        const day = RANGE_CACHE[d] || {};
        (day.checks||[]).forEach(c=>{
          totalChecks++;
          const k = String(c.check_type||'Unknown');
          byType[k] = (byType[k]||0) + 1;
        });
      });

      const typeRows = Object.keys(byType).sort().map(t=>{
        return `<tr><td>${t}</td><td>${byType[t]}</td></tr>`;
      }).join('') || '<tr><td colspan="2" class="small muted">No checks in range.</td></tr>';

      host.innerHTML = `
        <div class="card" style="border:1px solid var(--line)">
          <div class="row"><b>Totals for range ${DR_CURRENT.start} → ${DR_CURRENT.end}</b></div>
          <div class="row" style="gap:16px">
            <div class="kpi"><div class="small">Total checks</div><div style="font-size:18px;font-weight:800">${totalChecks}</div></div>
          </div>
        </div>
        <div class="card" style="margin-top:10px;border:1px solid var(--line)">
          <b>Checks by type</b>
          <table style="margin-top:8px;width:100%">
            <thead><tr><th>Check type</th><th>Count</th></tr></thead>
            <tbody>${typeRows}</tbody>
          </table>
        </div>
      `;
    }

    // ---------- Data flow (top level) ----------
    function init(){
      $('#dateInput').value = isoToday();

      google.script.run.withSuccessHandler(d=>{
        try{
          if (d && d.today) $('#dateInput').value = d.today;
          if (d && d.allowedStates) ALLOWED_STATES = d.allowedStates.slice();
          setAlert('');
          fetchSnapshot();
        }catch(err){ setAlert('Init parse error: '+err, true); }
      }).withFailureHandler(e=>{
        setAlert('Init error: '+(e?.message||e), true);
      }).getTLInit();

      $('#btnRefresh').addEventListener('click', fetchSnapshot);
      $('#dateInput').addEventListener('change', fetchSnapshot);

      // Auto refresh (pause while drawer open)
      setInterval(()=>{ if (AUTO_REFRESH) fetchSnapshot(true); }, 20000);
    }

    function fetchSnapshot(silent=false){
      const dateISO = $('#dateInput').value || isoToday();
      if (!silent){ $('#btnRefresh').disabled=true; $('#statusMsg').textContent='Refreshing…'; setAlert(''); }
      google.script.run.withSuccessHandler(snap=>{
        try{
          $('#btnRefresh').disabled=false; if (!silent) $('#statusMsg').textContent='';
          if (!snap || !Array.isArray(snap.rows)){ setAlert('Snapshot returned no data.', true); $('#tableMount').innerHTML='<div class="small">No data.</div>'; return; }
          LAST_SNAPSHOT = snap;
          renderKPIs(snap.kpis||{});
          renderTable(snap.rows);
        }catch(err){ setAlert('Render error: '+err, true); }
      }).withFailureHandler(e=>{
        $('#btnRefresh').disabled=false; if (!silent) $('#statusMsg').textContent='';
        setAlert('Snapshot error: '+(e?.message||e), true);
        $('#tableMount').innerHTML='<div class="small">No data.</div>';
      }).getTLSnapshot(dateISO);
    }

    document.addEventListener('DOMContentLoaded', init);
  </script>
</body>
</html>
